#ifndef SIGNAL_H_
#define SIGNAL_H_


/**
 * Модуль передачи сигналов из ядра процессам.
 * Сигналы в ОС разделяем на 2 типа.
 *
 * 1) Сигналы для процесса
 * 2) Сигналы для потока
 *
 *  Основные принципы работы с сигналами следующие:
 *  1) В ядре не предусматриваются соответствующие специальные системные вызововы.
 *  2) Ядро генерирует некоторые сигналы для процессов через механизм IPC, остальные сигналы - самими процессами.
 *  3) Весь функционал приема и обработки сигналов на прикладном уровне.
 *  4) Каждый процесс имеет свой канал сообщений, который принимает сообщения о сигналах уровня процесса от ядра
 *     или смежных(родительского и дочерних) процессов. По умолчанию он не существует и создается стандартной
 *     библиотекой при запуске процесса. При создании канала с зарезервированным именем SIGNAL_CHANNEL
 *     ядро регистрирует его как канал доставки сигнальных сообщений.
 *  5) Стандартная библиотека инициализирует один поток для приема и обработки сигналов, которому назначает
 *
 *  6) Каждый поток может зарегистрировать свой обработчик сигнала, который будет вызван как внешняя функция
 *     потока стандартной библиотеки.
 *  7) Ядро гарантирует выполнение обработчика сигнала раньше, чем зарегистрировавший его поток получит
 *     управление. Это позволяет при необходимости решать задачи обработки исключений. В перспективе возможна реализация
 *     обратной раскрутки стека (т.н. unwind процедура) выполнения потоков, которые были прерваны не блокированными
 *     сигналами.
 *
 *
 *  К ним относятся сигналы SIGHUP, SIGCHLD, SIGKILL,... TODO.
 *  Основной механизм передачи - IPC, то есть сообщениями в специально именованые системные каналы сообщений
 *  SIGNAL_CHANNEL, которые открываются на прикладном уровне при старте процесса, обычно в os-libc.
 *  Разница между каналами SIGNAL_CHANNEL и обычными прикладными каналами заключается в том, что
 *  ядро ОС регистрирует создаваемый канал SIGNAL_CHANNEL в том числе для передачи процессу сигналов от ядра ОС.
 *  Для обработки сигналов процесс должен создать канал SIGNAL_CHANNEL, ждать и обрабатывать входящие сообщения
 *  о сигналах в специальном формате sys_msg_signal_event_t в отдельном потоке. Однако реализация стандартной
 *  библиотеки os-libc сама занимается созданием и регистрацией обработчика сигналов низкого уровня при запуске
 *  процесса. Поэтому программы, использующие os-libc, должны применять предусмотренный библиотекой интерфейс работы
 *  с сигналами. В этот интерфейс входят функции регистрации (снятия с регистрации) прикладных обработчиков сигналов,
 *  маскирования и размаскирования обработки сигналов, ожидания и выборки входящего сигнала через прямой вызов
 *  функции без зарегистрированного асинхронного обработчика.
 *  Все прикладные обработчики регистрируются как асинхронные потоки, аналогичные потокам-обработчикам прерываний по
 *  своей концепции исполнения. Они всегда готовы быстро начать выполняться, то есть являются зарегистрированными
 *  потоками, находящимися в исходном состоянии STOPPED.
 *  Низкоуровневый обработчик сообщений о сигналах занимается вопросами запуска зарегистрированных
 *  прикладных обработчиков через системный вызов os_thread_run. После завершения выполнения функции обработчика сигнала
 *  ядро ОС сбрасывает в исходное состояние контекст потока обработчика. Поток может быть повторно запущен по
 *  os_thread_run. Аналогично работающие потоки-обработчики прерываний запускаются автоматически ядром ОС.
 *  Повторный запуск обработчика сигнала возможен только после завершения его предыдущего исполнения, если оно было.
 *  Ожидание завершения работы потока выполняется по os_thread_join.
 *  Функциональность работы с сигналами в нашей концепции вынесена из ядра ОС, то есть в интерфейсе ядра отсутствуют
 *  специальные системные вызовы для работы с сигналами. Задача приема сигналов, их трансляции всем заинтересованным
 *  потокам или запуск соответствующих обработчиков, последующая обработка полностью возлагаются на прикладной уровень.
 *  При создании потока указывается его назначение(тип) - обработчик сигналов. Ядро управляет выполнением обработчика
 *  сигнала с динамическим приоритетом больше любого обычныго потока в процессе.
 *  Таким образом, интерфейс стандартной библиотеки os-libc обеспечивает последовательный прием сообщений о сигналах
 *  для процесса от ядра ОС или от смежных процессов(родительского или дочерних) и запуск асинхронных обработчиков, если
 *  они зарегистрированы, и сигналы не блокированы. Одно входящее сообщение о сигнале преобразуется в один запуск
 *  свободного обработчика.  В отсутствии зарегистрированных обработчиков или при их блокировке на уровне процесса,
 *  стандартная функция добавляет событие о сигнале в соответствующую очередь, либо заменяет предыдущее событие
 *  по указанному сигналу новым (настраивается).
 *
 *
 *  Сигналы между потоками работают только как флаги, работа с которыми ведется через прямые вызовы функций ожидания
 *  или проверки наличия активного сигнала из самих потоков прикладного процесса. Стандартная библиотека предлагает
 *  интерфейс и реализацию таких методов на прикладном уровне.
 *  В текущей версии ОС не предусматриваются механизмы регистрации и прямого выполнения функций обработчиков сигналов
 *  в стеке(контексте) потока. В определенном смысле они снижают уровень безопасности и надежности системы, увеличивая
 *  сложность реализации ядра ОС. Остается открытым вопрос поддержки обработки исключений (try-catch конструкции) в
 *  прикладном коде. В настоящее время поддержка этого не предусмотрена. TODO
 *
 */

/**
 * Функция установления соединения и передачи сообщения о сигнале в канал сигналов заданного процесса.
 * Предназначена для передачи сигналов SIGHUP, SIGCHLD из ядра при завершении процессов.
 * @param from
 * @param to
 * @param num
 * @param code
 * @param value
 * @return
 */
int signal_to_proc(struct thread *from, struct process *to, int num, int code, union sigval value);
int signal_to_thread(struct thread *to, int num, int code, union sigval value);

#endif /* SIGNAL_H_ */
