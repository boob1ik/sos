#ifndef SEMAPHORE_H_
#define SEMAPHORE_H_

#define SEM_FAILED NULL
#define SEM_VALUE_MAX       INT_MAX
typedef struct syn sem_t;

/**
 * Создать неименованный семафор, рабочие поля которого находятся в динамической куче адресного пространства процесса.
 * Созданный семафор относится к классу быстрых, то есть работа с ним ведется атомарными командами
 * без выполнения системных вызовов при отсутствии необходимости в очереди ожидающих потоков.
 *
 * ЗОС не поддерживает работу с неименованными семафорами для межпроцессного взаимодействия по причине
 * особой концепции безопасности. Семафоры для межпроцессной синхронизации должны быть именованными и для
 * них должна применяться функция создания или открытия sem_open.
 *
 * POSIX 1003.1 SEM
 * @param sem           - адрес дескриптора семафора
 * @param pshared       - должен быть = 0, то есть допускаются только локальные неименованные семафоры
 * @param value         - начальное значение счетчика
 * @return      0       - создан новый семафор
 *              -1      - ошибка
 * errno:
 *              EINVAL  - ошибка аргумента, в том числе не допустимое начальное значение для семафора
 *              EBUSY   - семафор с заданным дескриптором уже был инициализирован и не был уничтожен
 *              ENOTSUP - pshared != 0
 *              ENOSPC  - не хватает ресурсов в системе
 */
int sem_init(sem_t * sem, int pshared, unsigned value );

/**
 * Удалить неименованный семафор.
 * Внимание! Только для неименованных семафоров
 *
 * POSIX 1003.1 SEM
 * @param sem
 * @return 0                - выполнено
 *         -1               - ошибка
 * errno:
 *         EINVAL
 */
int sem_destroy( sem_t * sem );

/**
 * Создать или открыть именованный семафор.
 *
 * POSIX 1003.1 SEM
 * @param sem_name          Путь и имя семафора в корневом пространстве имен
 * @param oflags            O_CREAT     - создать новый семафор или открыть существующий
 *                          O_EXCL      - выдать ошибку, если семафор или другой объект с таким путем уже существует
 * @return                - идентификатор  семафора
 *             SEM_FAILED - ошибка
 * errno:
 *             EACCES     - невозможно создать или открыть семафор с указанным путем
 *             EEXIST     - семафор уже существует с таким путем и указан флаг O_EXCL
 *             EINVAL     - не корректный путь или недопустимое начальное значение
 *             ENOSPC     - не хватает ресурсов в системе
 *
 */
sem_t * sem_open( const char * sem_name, int oflags, ...);

/**
 * Закрыть сеанс работы с именованным семафором.
 * Освобождаются ресурсы в адресном пространстве процесса, соответствующие идентификатору sem.
 * Процесс-создатель не удаляет семафор из ядра вызовом этой функции.
 * Внимание! Только для именованых семафоров.
 *
 * POSIX 1003.1 SEM
 * @param sem           - идентификатор семафора
 * @return 0            - выполнено
 *         -1           - ошибка
 *
 * errno:
 *         EINVAL       - ошибка дескриптора
 */
int sem_close(sem_t * sem);

/**
 * Удаление именованного семафора. Окончательное удаление будет выполнено только после окончания работы
 * с семафором других процессов по sem_close.
 *
 * Внимание! От стандартной функии POSIX 1003.1 SEM отличается аргументом - вызов ведется по дескриптору.
 * Удалять может только процесс-создатель.
 * @param sem           - идентификатор семафора
 * @return  0           - выполнено
 *          -1          - ошибка
 *  errno:
 *          EINVAL
 */
int sem_unlink_destroy(sem_t * sem);

/**
 * Функция уменьшает значение семафора на 1 если оно > 0.
 * @param sem
 * @return  0           - условие синхронизации выполнено
 *          -1          - ошибка
 * errno:
 *          EDEADLK     - обнаружен дедлок
 *          EINVAL      - дескриптор не рабочий
 */
int sem_trywait( sem_t * sem );

/**
 * Функция уменьшает значение семафора на 1 если оно > 0. Иначе поток блокируется и ожидает положительного значения
 * @param sem
 * @return  0           - условие синхронизации выполнено
 *          -1          - ошибка
 * errno:
 *          EDEADLK     - обнаружен дедлок
 *          EINVAL      - дескриптор не рабочий
 *          EINTR       - выполнение прервано по внешнему событию
 */
int sem_wait( sem_t * sem );

/**
 * Функция уменьшает значение семафора на 1 если оно > 0. Иначе поток блокируется и ожидает положительного значения
 * в течении заданного ограниченного времени
 * @param sem
 * @param abs_timeout
 * @return  0           - условие синхронизации выполнено
 *          -1          - ошибка
 * errno:
 *          EDEADLK     - обнаружен дедлок
 *          EINVAL      - дескриптор не рабочий
 *          EINTR       - выполнение прервано по внешнему событию
 *          ETIMEDOUT   - таймаут истек
 *
 */
int sem_timedwait(sem_t * sem, const struct timespec * abs_timeout );

/**
 * Функция увеличивает значение семафора на 1
 * @param sem
 * @return  0           - выполнено
 *          -1          - ошибка
 * errno:
 *          EINVAL      - дескриптор не рабочий
 */
int sem_post( sem_t * sem );


#endif /* SEMAPHORE_H_ */
